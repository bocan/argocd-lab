kube-prometheus-stack:
  ## Create default rules for monitoring the cluster
  ##
  defaultRules:
    create: true
    rules:
      etcd: false

  kubeApiServer:
    enabled: true
    tlsConfig:
      insecureSkipVerify: true

  kubelet:
    insecureSkipVerify: true

  alertmanager:
    ingress:
      enabled: true
      ingressClassName: traefik

      #annotations:
      #  external-dns.alpha.kubernetes.io/host: "alertmanager.funderburg.uk"
      #  cert-manager.io/cluster-issuer: letsencrypt-prod

      hosts:
      - alertmanager.funderburg.uk

      ## Paths to use for ingress rules - one path should match the alertmanagerSpec.routePrefix
      ##
      paths:
      - /

      ## TLS configuration for Alertmanager Ingress
      ## Secret must be manually created in the namespace
      ##
      tls:
      - secretName: alertmanager-general-tls
        hosts:
        - alertmanager.funderburg.uk

  grafana:

    assertNoLeakedSecrets: false

    smtp:
        existingSecret: "aws-smtp-credentials"
        userKey: "user"
        passwordKey: "password"

    grafana.ini:
      smtp:
        enabled: true
        host: email-smtp.eu-west-2.amazonaws.com:587
        startTLS_policy: MandatoryStartTLS
        from_address: chris@funderburg.me

      server:
        domain: https://grafana.funderburg.uk/
        root_url: https://grafana.funderburg.uk/
      auth.generic_oauth:
        enabled: true
        name: KEYCLOAK  # this will be the oidc button name  
        use_refresh_token: true
        allow_sign_up: true
        client_id: grafana  # this is your grafana client name on keycloak 
        use_pkce: true
        scopes: openid email profile offline_access roles
        auth_url: https://keycloak.funderburg.uk/realms/home/protocol/openid-connect/auth
        token_url: https://keycloak.funderburg.uk/realms/home/protocol/openid-connect/token
        api_url: https://keycloak.funderburg.uk/realms/home/protocol/openid-connect/userinfo
        signout_redirect_url: https://keycloak.funderburg.uk/realms/home/protocol/openid-connect/logout
        role_attribute_strict: true
        role_attribute_path: (contains(resource_access.grafana.roles[*], 'admin') && 'Admin') || (contains(resource_access.grafana.roles[*], 'editor') && 'Editor') || 'Viewer'
        allow_assign_grafana_admin: true  # enable grafanaAdmin login through Keycloak
        email_attribute_path: email # from values from token
        name_attribute_path: full_name  # from values from token
        login_attribute_path: username # email or preferred_username or something from tokens
      auth:
        disable_login_form: false 
        oauth_auto_login: false 
        oauth_skip_org_role_update_sync: false  
        skip_org_role_sync: false  
      users:
        auto_assign_org: true
        auto_assign_org_role: Viewer  # default org_role
        auto_assign_org_id: 1
      security:
        disable_initial_admin_creation: true
        allow_embedding: true
        cookie_secure: false

    adminPassword: prom-operator

    ingress:
      enabled: true

      ingressClassName: traefik

      annotations:
        external-dns.alpha.kubernetes.io/host: "grafana.funderburg.uk"
        cert-manager.io/cluster-issuer: letsencrypt-prod

      ## Hostnames.
      ## Must be provided if Ingress is enable.
      ##
      hosts:
      - grafana.funderburg.uk

      tls:
      - secretName: grafana-general-tls
        hosts:
        - grafana.funderburg.uk

    persistence:
      enabled: true
      type: sts
      storageClassName: nfs-client
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      finalizers:
        - kubernetes.io/pvc-protection

  kubeControllerManager:
    endpoints: ['192.168.0.51']
    insecureSkipVerify: true

  kubeEtcd:
    enabled: false

  kubeScheduler:
    endpoints: ['192.168.0.51']
    insecureSkipVerify: true

  kubeProxy:
    enabled: true

    endpoints: ['192.168.0.51']
    insecureSkipVerify: true

  prometheus:
    enabled: true

    ingress:
      enabled: true

      ingressClassName: traefik

      annotations:
        external-dns.alpha.kubernetes.io/host: "prometheus.funderburg.uk"
        cert-manager.io/cluster-issuer: letsencrypt-prod

      hosts:
        - prometheus.funderburg.uk

      paths:
      - /

      tls:
      - secretName: prometheus-general-tls
        hosts:
          - prometheus.funderburg.uk

    ## Settings affecting prometheusSpec
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusspec
    ##
    prometheusSpec:
      ## Statefulset's persistent volume claim retention policy
      ## pvcDeleteOnStsDelete and pvcDeleteOnStsScale determine whether
      ## statefulset's PVCs are deleted (true) or retained (false) on scaling down
      ## and deleting statefulset, respectively. Requires 1.27.0+.
      ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
      persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain

      ## How long to retain metrics
      ##
      retention: 10d
      ##
      retentionSize: ""

      ## Prometheus StorageSpec for persistent data
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
      ##
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: nfs-client
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
